#!/bin/bash
# Simple note taking script

diane_file=~/diane
date=$(date +"<%m-%d-%Y-%H:%M:%S>")
IFS=$'\n'

normal=$'\e[8m'
bold=$'\e[1m'
italic=$'\e[3m'
underlined=$'\e[4m'
inverted=$'\e[7m'
blink=$'\e[5m'
reset=$'\e[0m'

green=$'\e[32m'
red=$'\e[31m'
yellow=$'\e[33m'
blue=$'\e[34m'
red=$'\e[31m'
cyan=$'\e[36m'
magenta=$'\e[35m'
gray=$'\e[37m'
dark_gray=$'\e[90m'
white=$'\e[97m'

label_color=$yellow
label_format=$bold$inverted

DONE="@done"
show_finished_task="true"


not_valid(){

    echo "not a valid index"

}

create_diane(){

    touch $diane_file
    echo "$diane_file created"
}

show_finished_tasks(){

    finished=$(grep "$DONE" $diane_file)

    if [[ -z $finished ]]; then

        echo -e "There is no finished task yet."

    else

         grep "$DONE" $diane_file  | awk '{$1="'$italic'"$1; $2=$2"'$reset'""'$italic'"; print $0}'

    fi

}

read_diane(){

    if [[ $show_finished_task == "true" ]]; then

        awk '{ if ($NF ~ "@done") $0="'$italic'"$0"'$reset'"; if ($NF ~ "@done") $NF="'$green'"$NF"'$reset'"; if ($2 ~ "#") $2="'$reset'" "'$label_format'" "'$label_color'"$2 "'$reset'"; if ($NF ~ "@done" && $2 ~ "#") $3="'$italic'"; print $0}' $diane_file

    elif [[ $show_finished_task == "false" ]]; then

        sed "/$DONE/d" $diane_file | awk '{ if ($2 ~ "#") $2="'$reset'" "'$label_format'" "'$label_color'"$2 "'$reset'"; print $0}'

    fi

}

edit_diane(){

    $EDITOR $diane_file

}

clear_diane(){

    sed -i "/.*/d" $diane_file

}
remove_diane(){

    rm $diane_file

}

add_new_task(){

    echo -e $date $input >> $diane_file

}

add_new_task_with_label(){

    label=$(echo $label | awk '{gsub("'$label'","#'$label'"); print toupper($0)}')
    echo -e $date $label $input >> $diane_file

}


filter_label(){

    case $filter in

        $filter) awk '$2 ~ /^[#]/' $diane_file | grep -i \#$filter;;
        *) awk '$2 ~ /^[#]/' $diane_file;;

    esac

}

make_array(){

    readarray content_array < $diane_file

    finished_tasks=()
    unfinished_tasks=()

    for lines in ${content_array[@]}; do

        if [[ $lines != *"$DONE"* ]]; then

            unfinished_tasks+=($lines)

        elif [[ $lines == *"$DONE"* ]]; then

            finished_tasks+=($lines)

        fi

        done

}

flag_finished_task(){

    while true; do

        make_array

        if (( "${#unfinished_tasks[@]}" == 0 )); then
            echo -e "Every task are finished."
            break 2
        fi

        for selected_task in ${!unfinished_tasks[@]}; do
            echo $green$bold$selected_task$reset ${unfinished_tasks[$selected_task]}
        done

        read task_index

        if [[ $task_index =~ ^[0-9]+$ ]] && (( $task_index < ${#unfinished_tasks[@]} )); then

            selected_task=${unfinished_tasks[$task_index]}

            echo -e $selected_task @done $reset"\n"

            sed -i s"/$selected_task/& $DONE/" $diane_file

        elif [[ $task_index =~ ^[0-9]+$ ]] && (( $task_index == ${#unfinished_tasks[@]} )); then

            not_valid

        elif [[ $task_index == "q" ]] || [[ $task_index == "Q" ]]; then

            break

        else

            not_valid

        fi

    done

}

unflag_finished_task(){

    while true; do

        make_array

        if (( "${#finished_tasks[@]}" == 0 )); then
            echo -e "There are no finished tasks yet."
            break 2
        fi

        for selected_task in ${!finished_tasks[@]}; do
            echo $yellow$bold$selected_task$reset ${finished_tasks[$selected_task]}
        done

    read task_index

    if [[ $task_index =~ ^[0-9]+$ ]] && (( $task_index < ${#finished_tasks[@]} )); then

        selected_task=${finished_tasks[$task_index]}

        replace_task=${selected_task% $DONE}

        echo -e flag removed: "$replace_task\n"

        sed -i s"/$selected_task/$replace_task/" $diane_file

    elif [[ $task_index =~ ^[0-9]+$ ]] && (( $task_index == ${#finished_tasks[@]} )); then

        not_valid

    elif [[ $task_index == "q" ]] || [[ $task_index == "Q" ]]; then

        break

    else

        not_valid

    fi

done

}

remove_finished_tasks(){

    sed -i "/$DONE/d" $diane_file

}

remove_task(){

    while true; do

        readarray content_array < $diane_file

        if [[ ${content_array[@]} > 0 ]]; then

            for tasks in ${!content_array[@]}; do

                echo -e $bold$red$tasks$reset ${content_array[$tasks]}

            done

        else

            echo "There is no task to show."
            break 2

        fi

        read task_index

        if [[ $task_index =~ ^[0-9]+$ ]] && (( $task_index < ${#content_array[@]} )); then

            selected_task=${content_array[$task_index]}

            echo -e removed: "$selected_task"

            remove_task=$(echo -e $selected_task)

            sed -i "/$remove_task/d" $diane_file

        elif [[ $task_index =~ ^[0-9]+$ ]] && (( $task_index == ${#content_array[@]} )); then

            not_valid

        elif [[ $task_index == "q" ]] || [[ $task_index == "Q" ]]; then

            break

        else

            not_valid

        fi
    done

}

help(){

cat << EOF

To add tasks/notes, use 'diane' command and type your task/note without any option.
To print your tasks/notes, use simply 'diane' command without any further options. If file > $diane_file < does not exist then it will be created first.
If 'show_finished_task' variable set true in the script, then it will print every tasks. If 'show_finished_task' variable is false, then it will print only pending tasks.

Options:

-clr    -- remove all content from file
-e      -- edit file
-r      -- remove file
-ff     -- selec task and flag it as finished (@done) in file. To exit from loop, type 'q' or 'Q' then press 'Return'
-uf     -- select task and remove flag (@done) in file. To exit from loop, type 'q' or 'Q' then press 'Return'
-sf     -- show only finished/flagged (@done) tasks
-rf     -- remove all finished/flagged (@done) tasks from file
-rt     -- remove selected task from file. To exit from loop, type 'q' or 'Q' then press 'Return'
-l      -- add label to note. You must write your note after the label between 'single quotes' or "double quotes"
-fl     -- filter labelled tasks. To show all labelled tasks just press 'Return'. To filter for specified label, type the required label's name then press 'Return'
-h      -- show this help page

EOF

}

diane(){

echo -e Diane is a mysterious woman Dale Cooper addresses all of his tapes to in the American television serial drama "$italic"Twin Peaks$reset."\n"See: http://twinpeaks.wikia.com/wiki/Diane

}

case $1 in

    "")
        if [[ -e $diane_file ]]; then

            if [[ -s $diane_file ]]; then

                read_diane

            else

                echo "There is no task to show."

            fi

        else

            create_diane
        fi

        ;;

    -clr) clear_diane;;
    -e) edit_diane;;
    -r) remove_diane;;
    -ff) flag_finished_task;;
    -uf) unflag_finished_task;;
    -sf) show_finished_tasks;;
    -rf) remove_finished_tasks;;
    -rt) remove_task;;
    -l) label=$2 ; input=$3 add_new_task_with_label;;
    -fl) filter=$2 filter_label;;
    -diane) diane;;
    -h) help;;
    *) input=$@ add_new_task;;

esac
