#!/bin/bash
# Simple note taking script

diane_file=~/diane
date=$(date +"<%m-%d-%Y-%H:%M:%S>")
IFS=$'\n'

italic=$'\e[3m'
normal=$'\e[8m'
bold=$'\e[1m'
reset=$'\e[0m'

green=$'\e[32m'
red=$'\e[31m'
yellow=$'\e[33m'

DONE="@done"
message="There is no task to show."
show_finished_task="true"

create_diane(){

    touch $diane_file
    echo "$diane_file created"
}

show_finished_tasks(){

    finished=$(cat $diane_file | grep "$DONE" | sed "s/^.*/$italic&/")

    if [[ -z $finished ]]; then

        echo -e "There is no finished task yet."

    else

        cat $diane_file | grep "$DONE" | sed "s/^.*/$italic&/"

    fi


}

read_diane(){

    if [[ $show_finished_task == "true" ]]; then
        
        sed "/$DONE/d" $diane_file
        cat $diane_file | grep "$DONE" | sed "s/^.*/$italic&/"
        #show_finished_tasks

    elif [[ $show_finished_task == "false" ]]; then
        
        sed "/$DONE/d" $diane_file

    fi

}

edit_diane(){

    $EDITOR $diane_file

}

clear_diane(){

    sed -i "/.*/d" $diane_file

}
remove_diane(){

    rm $diane_file

}

add_new_task(){

    echo -e $date $input >> $diane_file

}

add_new_task_with_label(){

    #label=$(echo $label | awk '{print toupper($0)}')
    
    echo -e $(echo -e $date $label $input | awk '{}') >> $diane_file

}

flag_finished_task(){

    while true; do
    readarray content_array < $diane_file

    unfinished_tasks=()

    for lines in ${content_array[@]}; do

        if [[ $lines != *"$DONE"* ]]; then

            unfinished_tasks+=($lines)

        fi

        done

    if (( "${#unfinished_tasks[@]}" == 0 )); then

        echo -e "Every task are finished."
        break 2

        fi

        for selected_task in ${!unfinished_tasks[@]}; do
            echo $green$bold$selected_task$reset ${unfinished_tasks[$selected_task]}
        done

    read -s -n1 task_index

    if [[ $task_index =~ ^[0-9]+$ ]] && (( $task_index < ${#unfinished_tasks[@]} )); then

        selected_task=${unfinished_tasks[$task_index]}

        echo -e $selected_task $italic@done $reset"\n"

        replace_task=$(echo -e $selected_task)

        sed -i s"/$replace_task/& $DONE/" "$diane_file"

    elif [[ $task_index =~ ^[0-9]+$ ]] && (( $task_index == ${#unfinished_tasks[@]} )); then

        echo "not a valid index"

    elif [[ $task_index == "q" ]] || [[ $task_index == "Q" ]]; then

        break

    else

        echo "not a valid index"

    fi

done

}

unflag_finished_task(){

    while true; do
    readarray content_array < $diane_file

    finished_tasks=()

    for lines in ${content_array[@]}; do

        if [[ $lines == *"$DONE"* ]]; then

            finished_tasks+=($lines)

        fi

        done

    if (( "${#finished_tasks[@]}" == 0 )); then

        echo -e "There is no finished task yet."
        break 2

        fi

        for selected_task in ${!finished_tasks[@]}; do
            echo $yellow$bold$selected_task$reset ${finished_tasks[$selected_task]}
        done

    read -s -n1 task_index

    if [[ $task_index =~ ^[0-9]+$ ]] && (( $task_index < ${#finished_tasks[@]} )); then

        selected=${finished_tasks[$task_index]}

        replace_task=${selected% $DONE}

        echo -e flag removed: "$replace_task"

        sed -i s"/$selected/$replace_task/" "$diane_file"

        echo -e "\n"

    elif [[ $task_index =~ ^[0-9]+$ ]] && (( $task_index == ${#finished_tasks[@]} )); then

        echo "not a valid index"

    elif [[ $task_index == "q" ]] || [[ $task_index == "Q" ]]; then

        break

    else

        echo "not a valid index"

    fi

done

}

remove_finished_task(){

    sed -i "/$DONE/d" $diane_file

}

remove_task(){

    while true; do

    readarray content_array < $diane_file

    if [[ ${content_array[@]} > 0 ]]; then

        for tasks in ${!content_array[@]}; do

            echo -e $bold$red$tasks$reset ${content_array[$tasks]}

        done

    else

        echo $message
        break

    fi

    read -s -n1 task_index

    if [[ $task_index =~ ^[0-9]+$ ]] && (( $task_index < ${#content_array[@]} )); then

        selected_task=${content_array[$task_index]}

        echo -e removed: "$selected_task"

        remove_task=$(echo -e $selected_task)

        sed -i "/$remove_task/d" $diane_file

    elif [[ $task_index =~ ^[0-9]+$ ]] && (( $task_index == ${#content_array[@]} )); then

        echo "not a valid index"

    elif [[ $task_index == "q" ]] || [[ $task_index == "Q" ]]; then

        break

    else

        echo "not a valid index"

    fi
done

}

help(){

cat << EOF

To add tasks/notes, use 'diane' command and type your task/note without any option.
To print your tasks/notes, use simply 'diane' command without any further options. If file > $diane_file < does not exist then it will be created first.
If 'show_finished_task' variable set true in the script, then it will print every tasks. If 'show_finished_task' variable is false, then it will print only pending tasks.

Options:

        -clr    -- remove all content from file
        -e      -- edit file
        -r      -- remove file
        -ff     -- selec task and flag it as finished (@done) in file. To exit from loop, type 'q' or 'Q'
        -uf     -- select task and remove flag (@done) in file. To exit from loop, type 'q' or 'Q'
        -sf     -- show only finished/flagged (@done) tasks
        -rf     -- remove all finished/flagged (@done) tasks from file 
        -rt     -- remove selected task from file. To exit from loop, type 'q' or 'Q'
        -h      -- show this help page

EOF

}

case $1 in

    "") 
        if [[ -e $diane_file ]]; then

            if [[ -s $diane_file ]]; then

                read_diane

            else

                echo $message

            fi

        else

            create_diane
        fi
        
        ;;

    -clr) clear_diane;;
    -e) edit_diane;;
    -r) remove_diane;;
    -ff) flag_finished_task;;
    -uf) unflag_finished_task;;
    -sf) show_finished_tasks;;
    -rf) remove_finished_task;;
    -rt) remove_task;;
    -h) help;;
    -l) label=$2 shift 1; input=$@ add_new_task_with_label;;
    *) input=$@ add_new_task;;

esac
