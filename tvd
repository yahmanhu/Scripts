#!/bin/bash
#                                      _
#         ___ _ __   ___ _ __ ___   __| |
#        / __| '_ \ / __| '_ ` _ \ / _` |
#        \__ | |_) | (__| | | | | | (_| |
#        |___| .__/ \___|_| |_| |_|\__,_|
#             |_|
#
#                 tvd (tv dump)
#               Created by: spcmd
#           http://spcmd.github.io
#           https://github.com/spcmd
#           https://gist.github.com/spcmd
#

# ===========================================================================
#   Configurable options
# ===========================================================================

# main url
url="http://tvmusor.aweben.hu"

highlight_color="1;33" # highlight color for the date/time
use_gap="yes" # yes OR no/empty
show_night_only="yes" # yes OR no/empty

# highlight keywords (e.g.: movie or tv show titles)
# use one title per line in the file
# edit the file with the '-e' option
file_keywords=$HOME/.tvd_highlights
reset_color=$(echo -e '\033[0m') # do not modify this!
keyword_color=$(echo -e '\033[1;32m')

#date/time regex
date_regex="[0-9]{4}.[0-9]{2}.[0-9]{2}" # date format (currently: YYYY-mm-dd)
time_regex="[0-9]{2}:[0-9]{2}" # time format (currently: HH:MM)
night_time_regex="2[0-9]:[0-9]{2}" # time starts with 2 => after 20:00

#date format
date_today="$(date +'%Y-%m-%d')"
date_tomorrow="$(date +'%Y-%m-%d' -d tomorrow)"

# array of channels; used for search_multi()
channels=("tv2" "super_tv2" "rtl_klub" "viasat3" "viasat6" "cool" "comedy_central" "film_p" "film_cafe" "pro4" "paramount" "story4")

# ===========================================================================
#   Functions
# ===========================================================================

# --------------------
# keyword highlighting
# --------------------
highlight_keywords() {
        if [[ -f $file_keywords ]]; then
            # 1. sed: remove blank lines (prevents the failing of sed color highlighting)
            # 2. sed: collapse lines into a single line and use pipes to seperate the keywords
            # 3. sed: remove all pipes from the end of the line (prevents the failing of sed color highlighting)
            keywords_list=$(sed -e '/^\s*$/d' -e ':a;N;$!ba;s/\n/|/g' -re 's/[|]{1,}$//' $file_keywords)
            sed -r "s/($keywords_list)/${keyword_color}&$reset_color/ig"
        else
            sed "" # do nothing
        fi
    }

# --------------------
# use_gap
# --------------------
gap() {
    if [[ $use_gap = "yes" ]]; then
        echo "";
    fi
}

# ---------------------
# show today's programs
# ---------------------
show_today() {

    # Description:
        # 1. lynx: dump the website
        # 2. awk: get today's block only, remove blank lines and show only rows starting with time_regex_format
        # 3. grep: colorize the date and the timestamps
        # 4. highlight keywords

    # filter output: show night programs only OR the whole day
    if [[ $show_night_only = "yes" ]]; then
        time_regex_format=$night_time_regex
    else
        time_regex_format=$time_regex
    fi
    
    # if no channel name given, show all from the channels array
    if [[ -z $tv ]]; then
        tv="${channels[@]}"
    fi
        for tv in $tv;
            do
                lynx -dump -display_charset="UTF-8" -nolist $url/$tv.html \
                    | awk "/$date_today/ {print;flag=1;next} /$date_tomorrow/{flag=0} flag {if (NF > 0 && /$time_regex_format/) print}" \
                    | GREP_COLOR="$highlight_color" grep -E --color=always "(^$date_regex.*|$|$time_regex)" \
                    | highlight_keywords

                # use gap?
                if [[ $use_gap = "yes" ]]; then
                    echo "";
                fi
            done
}

# -----------------------------
# search weekly in all channels
# -----------------------------
search() {
    for channel in "${channels[@]}"
    do
        lynx -dump -display_charset="UTF-8" -nolist $url/$channel.html \
        | sed -e "/^\s*$/d" -re "/$date_regex|$time_regex.+$query/I!d" \
        | GREP_COLOR="$highlight_color" grep -E --color=always "(^$date_regex.*|$|$time_regex)" \
        | grep -i --color=never -B1 "$query"

    done
}

# ------------------------------------------
# search for all keywords in weekly programs
# -------------------------------------------
search_keywords() {
    keywords_list=$(sed -e '/^\s*$/d' -e ':a;N;$!ba;s/\n/|/g' -re 's/[|]{1,}$//' $file_keywords)
    for channel in "${channels[@]}"
    do
        lynx -dump -display_charset="UTF-8" -nolist $url/$channel.html \
        | sed -e "/^\s*$/d" -re "/$date_regex|$time_regex.+($keywords_list)/I!d" \
        | GREP_COLOR="$highlight_color" grep -E --color=always "(^$date_regex.*|$|$time_regex)" \
        | grep -E -i --color=never -B1 "($keywords_list)"

    done
}
# ----------------------------------
# search title in port.hu's database
# ----------------------------------
search_porthu() {
    if [[ -x /bin/xdg-open ]]; then
        # convert spaces to plus (+) sings and convert accented characters
        q=$(echo "$query" | sed 's/ /+/g' | iconv -t ascii//TRANSLIT)
        echo -e "==> Search query: \033[1;32m$query\033[0m converted to: \033[1;32m$q\033[0m"
        echo "==> Done: Opened in your default browser."
        xdg-open "http://port.hu/pls/ci/cinema.film_creator?i_text=$q&i_film_creator=1" 2>/dev/null # /dev/null fixes the annoying message: GLib-CRITICAL **: g_slice_set_config: assertion `sys_page_size == 0′ failed
    else
        echo "Error: command not found: xdg-open"
    fi
}

# ---------------------------------------------------------------------------
# generate channel list from the channels array (using it for zsh completion)
# ---------------------------------------------------------------------------
generate_channel_list() {

    file_channel_list=$HOME/.tvd_channels

    if [[ ! -e $file_channel_list ]]; then

        printf '%s\n' "${channels[@]}" > $file_channel_list
        echo "Done: '$file_channel_list' has been generated."

    else

        echo "Warning: '$file_channel_list' already exists! Overwrite it? [yY|nN]"
        read answer
        if [[ $answer = "y" ]] || [[ $answer = "Y" ]]; then
            printf '%s\n' "${channels[@]}" > $file_channel_list
            echo "Done: '$file_channel_list' has been updated."
        else
            echo "Aborted."
            exit
        fi

    fi
}

# --------------------
# help
# --------------------
usage() {
cat <<EOF
Usage: $(basename $0) [option|channel name] <query>

Options:

        <channel1|channel2 ...>         Show today's programs of the selected channels.
        -s, --search <query>            Search in weekly programs in all channels. Without query it searches for all the keywords from the keywords file.
        -p, --porthu <query>            Search in port.hu's database.
        -g, --generate-list             Generate channel list from the channels array (for zsh completion).
        -e, --edit-keywords             Edit the keywords file that is used for highlighting (uses \$EDITOR for editing).
        -h, --help                      This help page.

Channel names:

        cool              Cool TV
        tv2               tv2
        rtl_klub          RTL Klub
        viasat3           Viasat 3
        viasat6           Viasat 6
        super_tv2         Super TV2
        film_p            Film+
        sorozat_p         Sorozat+
        film_cafe         Film Café
        axn               AXN
        amc               AMC
        paramount         Paramaount Channel
        pro4              PRO 4
        rtl_p             RTL+
        story4            Story 4
        story5            Story 5
        rtl_2             RTL II
        fox               Fox
        m1                m1
        m2                m2
        m3                m3
        duna_televizio    Duna TV
        duna_world        Duna World
        comedy_central    Comedy Central
        hbo               HBO
        hbo_2             HBO 2
        cinemax           Cinemax
        cinemax_2         Cinemax 2
        film_mania        Film Mánia
        universal         Universal
        filmbox           Filmbox
EOF
}

# ===========================================================================
#   Doing the stuff
# ===========================================================================

if [[ $# == 0 ]]; then

    show_today | less -ri

else

    case $1 in

        -s|--search) if [[ -z $2 ]]; then search_keywords; else query=$2 search;fi;;
        -p|--porthu) query=$2 search_porthu;;
        -g|--generate-list) generate_channel_list;;
        -e|--edit-keywords) $EDITOR $file_keywords;;
        -h|--help|help) usage;;
        *)tv=$@ show_today | less -ri;;

    esac
fi
