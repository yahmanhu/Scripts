#!/bin/bash
# Select media (video) file from dmenu and play it with a media player
# Download subtitle automatically - requires periscope (https://github.com/patrickdessalle/periscope)

# Base directory where script looks for media and .srt files.
# For search in multiple directories use an array without quotes, e.g.:
# dir=(~/dir1 ~/dir2)
dir=~/downloads
# Journal file to keep tracking what and when you watched
journal=~/dmw_journal
# Use periscope (yes or no)?
use_periscope="no"
# Date format for journaling
date=$(date +"%d-%m-%Y-%H:%M")
# dmenu style
[[ -f ~/.dmenurc ]] && source ~/.dmenurc || DMENU='dmenu -i -l 20'
# dmenu font for subtitle prompt
subtitle_prompt_font="Terminus"
# media player command
player="mpv"

# Find files
find_files(){ find "$dir" \( -iregex ".+\.\(mkv\|mp4\)" ! -iname "sample.mkv" \); }
# Find .srt files for the selected media file in it's own directory by changing file extension during find
find_srt() { find "$selected_file_dir" -iname "${file_name%.mkv}.srt" -o -iname "${file_name%.mp4}.srt"; }
# Find media files and slice the path leaving only the file names and their extensions
file_names(){
    # Check if journal file exist to avoid grep error message
    if [[ ! -e $journal ]]; then
        touch $journal
    fi
    filename_list=$( (find_files) | awk -F "/" '{print $NF}')
    readarray -t name_array <<< "$filename_list"
    for i in "${name_array[@]}"; do
        # Escape the junk in the selected file's name
        i=$(echo "$i" | sed 's/ /\ /g;s/\[/\\[/g;s/\]/\\]/g')
        if grep -q "$i" "$journal"; then
            i=${i//*/\*$i}
        fi
        echo "$i"
    done
}
# Play function
play(){ "$player" "$selected_file"; }

# Print file names into dmenu
file_name=$( file_names | sort | $DMENU)
echo "$file_name"

case $file_name in

    # If no file selected, then exit the program
    "") exit;;

    *)  # Remove \ and * symbols before write into journal
        journal_entry=$(echo "$file_name" | sed 's/\\//g;s/*//g')
        #echo JOURNAL ENTRY "$journal_entry"
        # If file name is already in the journal, then don't add it agian
        if grep -F "$journal_entry" "$journal"; then
            :
        else
            #echo "$date $(echo $file_name | sed 's/\\//g;s/*//g')" >> $journal
            echo "$date" "$journal_entry" >> "$journal"
        fi
        ;;

esac

# Get the selected file's complete path
selected_file=$(find "$dir" -iname "$file_name")
#echo "$selected_file"
# Get the path of the directory that contains the selected file
selected_file_dir=$(echo "$selected_file" | awk -F "/" 'BEGIN{OFS="/"} {$NF=""; print $0}')
#echo "$selected_file_dir"

# If no subtitle (.srt) file for the selected file
# Check if we want to use periscope (if use_periscope variable is "yes")
if [[ $use_periscope == "yes" ]]; then
    if [[ ! -e $(find_srt) ]]; then
        # Ask for download
        subtitle=$(echo -e "yes\nno" | dmenu -p "Download subtitle before start?" -i -fn $subtitle_prompt_font)

        case $subtitle in
            # If answer is yes, then inform user via dmenu and try to download subtitle with periscope
            yes) dmenu -p "Downloading subtitle..." -fn $subtitle_prompt_font &

                # Kill dmenu after 2 seconds, because we use it just as a feedback
                if pgrep "dmenu" > /dev/null;then
                    sleep 2
                    pkill dmenu
                # Download subtitle with periscope (-l means language)
                fi && periscope -l en "$selected_file"

                # If periscope can't find subtitle to download, then ask if we want to play the selected file or not
                if [[ $? -ne 0 ]]; then subtitle_error=$(echo -e "yes\nno"  |  dmenu -p "Can't find subtitle. Play anyway?" -i -fn $subtitle_prompt_font)

                    case $subtitle_error in
                        yes) play;;
                        no) exit;;
                    esac

                else
                    play
                fi
                 ;;

            # If we don't want to download subtitle file, then play instantly
            no) play ;;
        esac

    # If there's already a subtitle for the selected file, then play instantly
    else
        play;
    fi
# If we don't want to use periscope (if use_periscope variable is "no"), then play immediately
else
    play;
fi
