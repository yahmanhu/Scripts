#!/bin/bash
# Simple translate script with history, using Translate Shell (https://github.com/soimort/translate-shell)

# Some color variables if needed
light_red='\e[91m'
light_cyan='\e[96m'
light_blue='\e[94m'
light_magenta='\e[95m'
light_yellow='\e[93m'
white='\e[97m'

# Clear and continue function
clearcont() {

    clear
    #continue

}

# Declare arrays
declare -a GTHIST
declare -a GTHISTFM

# If script got input arguments then translate them with translate-shell
if [[ $# -gt 0 ]]; then
    trans hu:en $@
# If there isn't any input argument...
else

# ... then start a loop and run the script until terminated
    while true; do

        # Ask for a phrase (or word) to look for
        read -p $'Next phrase: ' phrase

        # If phrase is "c" (abbreviation for clear) script clears the terminal and continues the loop
        if [[ $phrase == "c" ]]; then

            clearcont
            continue

        # If phrase is "q" (abbreviation for exit), script exits the program by breaking the loop
        elif [[ $phrase == "q" ]]; then

            break

        # If phrase is "hist" script clears the terminal and jumps into history
        elif [[ $phrase == "hist" ]]; then
            clear

        echo -e "Korábban keresett kifejezések\n\nTovábbi fordításokért válasszon a listából. Kilépéshez gépelje az 'exit' szót majd nyomjon entert.\n"

            # Iterate through all variables in the history array...
            for i in "${!GTHIST[@]}"; do

            # ... and echo them pairing with their translations
                echo -e "$i ${GTHIST[$i]} "[${GTHISTFM[$i]}]""

            done

            # You can select from the list for further translations...
            read -p $'\nSelect: ' select

            phrase=${GTHIST[$select]}

            # ... or exit history by typing "exit"
            if [[ $select == "exit" ]]; then

                clearcont
                continue

            fi

        fi

        # Translate given phrase with Translate Shell
        output=$(trans hu:en "$phrase")
        echo -e "\n$output\n"

        # Getting the first meaning of the phrase
        first_meaning=$(echo -e $output | grep -o -E '.*Definitions|.*Translations' | sed "s/$phrase//" | sed "s/\/.*\// /" | sed "s/Definitions//" | sed "s/Translations//")

        # Add phrase to history array. If phrase is already on the list, then do nothing (prevent multiplicating same phrases). Also add the first meaning of the phrase to the list
        if [[ ${GTHIST[@]} =~ "$phrase" ]]; then
            :
        else
            GTHIST+=("$phrase")
            GTHISTFM+=("$first_meaning")
        fi

    # End of loop
    done
fi
